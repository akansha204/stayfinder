// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String? // Google users may not provide a name
  email         String    @unique
  password      String? // Nullable for Google users
  image         String? // Google profile image
  emailVerified DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listings Listing[]
  bookings Booking[]
  accounts Account[] // Added for NextAuth external providers
  sessions Session[] // Added for NextAuth sessions
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Listing {
  id            String   @id @default(uuid())
  title         String
  description   String
  location      String
  pricePerNight Float
  images        String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  hostId String
  host   User   @relation(fields: [hostId], references: [id])

  bookings Booking[]
}

model Booking {
  id         String   @id @default(uuid())
  checkIn    DateTime
  checkOut   DateTime
  totalPrice Float
  createdAt  DateTime @default(now())

  guestId String
  guest   User   @relation(fields: [guestId], references: [id])

  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])
}
